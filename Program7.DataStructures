/*
   Program 7
   Name: Fowler Trotter
   Date: 30 November 2023
   Pledged
*/
#include<iostream>
#include<cstdlib>
#include<ctime>
using namespace std;

template<class T>
class BinaryTree {
private:
    T element[256];
    int size;
public:
    BinaryTree();
    ~BinaryTree() { cout << "Bye"; }
    bool IsEmpty() const { return size == 0; }
    void Insert(T x);
    void PreOrder(int i = 1);
    void PostOrder(int i = 1);
    void InOrder(int i = 1);
    void LevelOrder(int i = 1);
};

template<class T>
BinaryTree<T>::BinaryTree() {
    for (int i = 0; i < 256; i++)
        element[i] = 0;
    size = 0;
}

template<class T>
void BinaryTree<T>::Insert(T x) {
    if (size < 256) {
        element[size] = x;
        size++;
    } else {
        cout << "Binary Tree is full!" << endl;
    }
}

template<class T>
void BinaryTree<T>::PreOrder(int i) {
    if (element[i] == 0 || i > size) {
        return;
    } else {
        cout << element[i] << " ";
        PreOrder(2*i);
        PreOrder(2*i + 1);
    }
}

template<class T>
void BinaryTree<T>::InOrder(int i) {
    if (element[i] == 0 || i > size) {
        return;
    } else {
        InOrder(2 * i);
        cout << element[i] << " ";
        InOrder(2 * i + 1);
    }
}

template<class T>
void BinaryTree<T>::PostOrder(int i) {
    if (element[i] == 0 || i > size) {
        return;
    } else {
        PostOrder(2 * i);
        PostOrder(2 * i + 1);
        cout << element[i] << " ";
    }
}

int main() {
    srand(time(NULL));
    int i;
    BinaryTree<int> T;
    T.Insert(7);
    T.Insert(2);
    T.Insert(4);
    T.Insert(3);
    T.Insert(5);
    T.Insert(6);
    T.Insert(9);
    cout << endl << "In Order:" << endl;
    T.InOrder();
    cout << endl << "Pre Order:" << endl;
    T.PreOrder();
    cout << endl << "Post Order:" << endl;
    T.PostOrder();
    for (i = 1; i < 50; i++)
        T.Insert(rand() % 1000);
    cout << endl << "In Order:" << endl;
    T.InOrder();

    return 0;
}
