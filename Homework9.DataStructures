/*
   Homework 9
   Name: Fowler Trotter
   Date: 31 October 2023
   Pledged
*/

#include<iostream>
#include<stdio.h>
using namespace std;

struct node
{
    int info;
    node* next;
};

class unorderedList
{
private:
    int length;
    node* listPtr;

public:
    unorderedList() { length = 0; listPtr = NULL; }
    void makeEmpty();
    void insertItem(int item);
    void printList();
    bool isEmpty();
    void deleteItem(int item);
    ~unorderedList() { makeEmpty(); }
    bool isFull();
};

    bool unorderedList::isFull()
{
    node* testNode = new node;
    delete testNode;
    return false;
}

    void unorderedList::insertItem(int item)
{
    node* newNode = new node;
    newNode->info = item;
    newNode->next = NULL;

    if (listPtr == NULL)
    {
        listPtr = newNode;
    }
    else
    {
        node* current = listPtr;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newNode;
    }

    length++;
}

    void unorderedList::printList()
{
    if (isEmpty())
    {
        cout << "List is empty." << endl;
        return;
    }

    node* current = listPtr;
    while (current != NULL)
    {
        cout << current->info << " ";
        current = current->next;
    }
    cout << endl;
}

    bool unorderedList::isEmpty()
{
    return length == 0;
}
    void unorderedList::makeEmpty()
{
    node* current = listPtr;
    while (current != NULL)
    {
        node* temp = current;
        current = current->next;
        delete temp;
    }
    listPtr = NULL;
    length = 0;
}

int main()
{
    unorderedList A;
    for (int i = 1; i <= 10; i++)
        A.insertItem(i);

    A.insertItem(9);
    A.insertItem(8);
    A.insertItem(7);
    A.insertItem(6);
    A.insertItem(5);
    A.insertItem(4);
    A.printList();

    return 0;
}
